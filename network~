//Example code: A simple server side code, which echos back the received message. 
//Handle multiple socket connections with select and fd_set on Linux 
#include <stdio.h> 
#include <string.h> //strlen 
#include <stdlib.h> 
#include <errno.h> 
#include <unistd.h> //close 
#include <arpa/inet.h> //close 
#include <sys/types.h> 
#include <sys/socket.h> 
#include <netinet/in.h> 
#include <sys/time.h> //FD_SET, FD_ISSET, FD_ZERO macros 
	
#define TRUE 1 
#define FALSE 0 
#define PORT 8888 
#define CLIENT_NUM=30
int addCilentSocketToSet(int client_socket[],fd_set readfds ){
	int i , clientFD;
	//add child sockets to set 
		for ( i = 0 ; i < CLIENT_NUM ; i++) //this for loop to fill the set 
		{ 
			//socket descriptor 
			clientFD = client_socket[i]; 
				
			//if valid socket descriptor then add to read list 
			if(clientFD > 0) 
				FD_SET( sd , &readfds); 
				
		
		
		} 
	
	
	
	
}
 void acceptNewConnection(int client_socket[],int master_socket,struct sockaddr_in address ){
	 	if ((new_socket = accept(master_socket, 
					(struct sockaddr *)&address, (socklen_t*)&addrlen))<0) 
			{ 
				perror("accept"); 
				exit(EXIT_FAILURE); 
			} 
			
				
			//add new socket to array of sockets 
			for (i = 0; i < max_clients; i++) 
			{ 
				//if position is empty 
				if( client_socket[i] == 0 ) 
				{ 
					client_socket[i] = new_socket; 
					
						
					break; 
				} 
			}
	 
 }
int main(int argc , char *argv[]) 
{ 
	
////////////////////////////////////////////////////////////////////////
	while(TRUE) 
	{ 
		//every time we clear the set and fill it again to keep uptodate with closed and opened socket 
		FD_ZERO(&readfds); 
	
		//add master socket to set 
		FD_SET(master_socket, &readfds); 
		max_sd = master_socket; 
			
			
			int fdNum=addCilentSocketToSet(client_socket,&readfds);//????????????????????check
			
			if(fdNum>max_sd){
				max_sd = fdNum;
			}
		
	
	
		//wait for an activity on one of the sockets , timeout is NULL , 
		//so wait indefinitely 
		activity = select( max_sd + 1 , &readfds , NULL , NULL , NULL); 
	
		if ((activity < 0) && (errno!=EINTR)) 
		{ 
			printf("select error"); 
		} 
		
		//there are two cases 
		//1- action happend to master socket (serversocket) 
		//2- action happend to client socket 


		
		//1- If something happened on the master socket , 
		//then its an incoming connection 
		if (FD_ISSET(master_socket, &readfds)) 
		{ 
		 acceptNewConnection(client_socket, master_socket, address )
		} 
			
			
	
			
			
		//2- else its some IO operation on some other socket (clientsocket+)
		for (i = 0; i < max_clients; i++) 
		{ 
			sd = client_socket[i]; 
				
			if (FD_ISSET( sd , &readfds)) 
			{ 
				//Check if it was for closing , and also read the 
				//incoming message 
				//when read return 0 that mean close connction
				//this statment read and if the result is 0 then close the connection but 
				//else it means the client connected to this socket send message to server
				
				if (( read( sd , buffer, 1024)) == 0) 
				{ 
					//Somebody disconnected , get his details and print 
					
					close( sd ); 
					client_socket[i] = 0; 
				} 
					
				//Echo back the message that came in 
				else
				{ 
					// server read message from one of the client so now server want to broadcast the message 
					int j
					for( j=0;j<CLIENT_NUM;j++){
						if(j!=i){
						int n = write(client_socket[j],buffer,strlen(buffer));
						 if (n < 0){ 
						 error("ERROR writing to socket");
						 }	
						}
						
					}
				} 
			} 
		} 
	} 
		
	return 0; 
} 
